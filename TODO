Review intervals folder: 
  General:
    ✔ Choose whether to use x == zero(T) or x == 0 across files @done(20-08-09 16:05)
    ✔ Use iszero everywhere @done(21-12-29 23:30)
    ✔ Check that default flavor always return safe result @done(21-12-29 23:30)
    ✔ {F <: Type} -> {F<:Type} (remove spaces) @done(20-08-09 16:05)
    ✔ Replace "IEEE standard" -> "IEEE Std 1788-2015" @done(19-08-22 16:13)
    ✔ "Corresponds to" -> "Implement" in doc @done(19-08-22 16:13)
    ✔ Rename `RR` -> `RR` @done(19-08-19 19:14)
    ✔ Investigate compile time warnings @done(21-12-29 23:30)
    ✔ Check if intervals of different flavor type can/should be equal in the sense of `isidentical` @done(19-12-08 01:12)
    ✔ Operation on different flavors of interval should always error. @done(21-12-29 23:29)
    ☐ Check if `signbit` is in the standard
    ☐ Test that definition of the default bound and flavor works
    ✔ Distribute functions from `special.jl` and `misc.jl` somewhere more informative @done(22-01-10 02:12)
  
  Discussion:
    ✔ Do we want to keep `@floatinterval` and `@biginteral` or use `@interval(F, expr1, expr2)` instead ? @done(22-01-10 00:55)
      ✔ It is fine actually @done(22-01-10 00:55)
    ✔ Decide if `inf` and `sup` should be used as default or rather `x.lo` and `x.hi` @done(21-12-29 23:29)
      ✔ `inf` and `sup` should be strict equivalent to `x.lo` and `x.hi` @done(21-12-29 23:29)

  Global precision:
    ✔ Get rid of it @done(19-08-20 16:49)
    ✔ Replace pi_interval(T) by Interval{T}(π) everywhere @done(19-12-18 22:59)
    ✔ Be sure it is done in compliance with #338 @done(19-12-18 22:59)
  
  Flavors:
    ☐ Add documentations for flavors
    Implement set based flavor:
      ☐ Check all requested stuff 10.5.
      ☐ Error on undefined
    ☐ Implement cset flavor
    ☐ Make cset default ?
    ✔ Define the flavor dependent symbols like ==, <, <= @done(21-12-29 23:28)
    
  intervals.jl:
    ☐ Split constructors from the includes
    ☐ Put helper, utils function (e.g. `eltype`) somewhere else
  
  macros.jl:
    ✔ Review @done(19-08-23 01:57)
    ☐ Clean or open issue for cleaning of the file
  
  precision.jl:
    ✔ Review @done(19-08-19 01:49)
  
  rounding.jl:
    ✔ Review @done(19-08-19 01:50)
    ✔ Decide how to define the setrounding function with multiple interval types @done(21-12-29 23:28)
      ✔ Use a global function `current_interval_rounding` @done(21-12-29 23:28)
    ✔ Check with latest discussion if everything is up to date @done(22-01-10 00:56)
    ✔ Remove default round method once it is not needed anymore @done(21-12-29 23:34)
    ✔ Test new mechanism @done(22-01-10 01:18)
    ☐ Remove `@round_up` and `@round_down`

  conversion.jl:
    ✔ Review @done(19-08-23 03:25)
    ✔ Fix ambiguity errors @done(21-12-29 23:27)
    ✔ Simplify `atomic` @done(22-01-10 00:56)
      ✔ Accept the fact we have two eps for floating points inputs @done(22-01-09 21:20)
    ✔ Test the new `atomic` @done(22-01-10 01:18)
  
  complex.jl:
    Should we even bother ?
    ✔ Drop support for now @done(22-01-10 00:57)
    ☐ Document the support drop

  9.1. Arithmetic functions:
    ✔ Distribute everything from arithmetic.jl in other files @done(20-08-13 00:27)
    basic.jl:
      ✔ Split @done(19-08-19 01:14)
      ✔ Verify all requested functions are there @done(19-08-19 02:01)
      ✔ Common @done(19-08-19 01:11)
      ✔ Adapt for the removal of promotion @done(21-12-29 23:27)
        ☐ Make sure all cases are in the test suite
      ☐ Flavor dependent *
      ☐ Flavor dependent /
      ☐ Flavor dependent inv
      ☐ Flavor dependent fma
    power.jl:
      ✔ Split @done(19-08-19 01:14)
      ✔ Verify all requested functions are there @done(19-08-19 04:29)
      ✔ Common @done(19-08-22 16:25)
      ☐ Flavor dependent power (for negative power)
      ☐ Flavor dependant log
      ✔ zero(T) or 0 ? @done(20-08-13 00:28)
    trigonometric.jl:
      ✔ Split @done(19-08-19 02:00)
      ✔ Verify all requested functions are there @done(19-08-19 02:00)
      ✔ Clean constants @done(19-08-19 14:13)
      ✔ Common @done(19-08-19 15:19)
      ✔ zero(T) or 0 ? @done(20-08-13 00:28)
    hyperbolic.jl:
      ✔ Split @done(19-08-19 15:23)
      ✔ Verify all requested functions are there @done(19-08-19 15:23)
      ✔ Common @done(19-08-19 15:31)
      ✔ Add docstring to generated funcs @done(19-08-19 16:45)
      ☐ Flavor dependent atanh
    integer.jl:
      ✔ Split @done(19-08-19 17:31)
      ✔ Verify all requested functions are there @done(19-08-19 17:35)
      ✔ Common @done(19-08-19 17:43)
    absmax.jl:
      ✔ Split @done(19-08-19 17:46)
      ✔ Verify all requested functions are there @done(19-08-19 17:46)
      ✔ Common @done(19-08-19 17:48)

  9.2. Cancellative:
    ✔ Split @done(19-08-19 19:14)
    ✔ Verify all requested functions are there @done(19-08-19 19:14)
    ✔ Common @done(19-08-19 19:14)
    ☐ Check if cancelminus has flavor dependent edge cases

  9.3 Set operations:
    ✔ Split @done(19-08-19 19:31)
    ✔ Verify all requested functions are there @done(19-08-19 19:31)
    ✔ Common @done(19-08-19 19:31)

  9.4. Numeric functions:
    ✔ Split @done(19-08-19 01:26)
    ✔ Common @done(19-08-19 01:11)
    ✔ Solve mid(a, 0.5) != mid(a) discrepency @done(20-08-09 15:42)
    ☐ Flavor dependent mid

  9.5. Boolean functions:
    These are in the set_operations.jl file
    ✔ Split @done(19-08-19 19:30)
    ✔ Verify all requested functions are there @done(19-08-19 19:31)
    ✔ Common @done(19-08-19 19:36)
    ✔ equal is not the same as == @done(19-08-19 19:36)
    ☐ Check `isweaklylessprime`
    ☐ Flavor dependent issubset/isinterior ?
    ✔ Choose infix operator for `isidentical` ? e.g. ∼ \sim<TAB> (not currently parsed by julia) or ∽ \backsim<TAB> or ≛ \stareq<TAB> or whatever @done(21-12-29 23:31)
    This is mainly used for tests and don't necessarily need to be exported

  9.6. Operatons on/with decoration:
    ☐ Split
    ☐ Verify all requested functions are there
    ☐ Review

  9.7. Literals:
    ☐ Review

  9.8. Constructor:
    ☐ Review
    ☐ Check correctness and tightness for Interval{T}(x)
    ☐ Document flavors
    ☐ Document constructors
    ✔ Make `..` work correctly for all input types @done(21-12-29 23:31)
    ✔ Choose a mechanism for the default bound @done(21-12-29 23:31)
    ✔ Add Interval{T}(π) @done(19-08-19 01:58)
      ✔ Check performance @done(19-12-18 23:00)
  
  10.5. Required operations in set-based flavor:
    10.5.1. Literals:
      ☐ No idea, but do it
    10.5.2. Constants:
      ✔ Add ref to doc @done(19-08-21 00:09)
      ☐ Move deprecation warning to a separated file ?
    10.5.3. Forward mode elementary functions:
      ✔ Add ref to doc @done(19-08-21 00:20)
    10.5.4. Reverse mode elementary functions:
      ✔ Open issue about their absence @done(19-08-20 03:16)
      They are in IntervalConstraint.jl
    10.5.5. Two output division:
      ✔ Add ref to doc @done(19-08-21 00:23)
      ☐ Flavor dependent edge case
      ☐ Recent GH issue
    10.5.6. Cancellative:
      ✔ Add ref to doc @done(19-08-22 15:51)
      ☐ Check that the set-based follow the required behavior for undbounded intervals
    10.5.7. Set opeations:
      ✔ Add ref to doc @done(19-08-22 15:55)
    10.5.8. Constructors:
      ☐ Review I guess
    10.5.9. Numeric functions:
      ✔ Add ref to doc @done(19-08-22 15:55)
    10.5.10. Boolean:
      ✔ Check everything required is present @done(19-08-22 16:07)
      ✔ Add ref to doc @done(19-08-22 16:07)
  10.6. Recommended operations:
    ☐ Check all that stuff


Other:
  bisect.jl:
    ☐ Review
  display.jl:
    ☐ Review
  InteralArithmetic.jl:
    ☐ Review
    ☐ Make sure everything is exported correctly
    ☐ Check renamed/new functions are exported
  parsing.jl:
    ✔ parsing of bare interval @done(21-12-29 23:27)
    ✔ parsing of decorated interval @done(21-12-31 02:05)
    ✔ Change `"3.16?1"` to be parsed as `"[3.15, 3.17]"` @done(21-12-31 02:16)
    ☐ Restore parsing of special forms e.g. `"entire"`, `[,]` (tests are marked as broken)
  rand.jl:
    ☐ Review
  symbols.jl:
    ☐ Make sure everything is here

  
Review other folders:
  Check PR #271 for details
  ☐ Do it
  multidim:
    arithmetic.jl:
      ☐ StaticArray.jl v1.0 wants to promote the array eltype to interval

Bugs:
  ✔ `Int` times `Interval` errors (e.g. `2*a`) @done(19-12-14 23:50)
  ☐ `(1..1) * pi` is not equal to `Interval(pi)`
  ☐ Find why 5 of the hyperb tests are failing only when put within the same testset as the others

Documentation:
  ✘ Put docstrings inside `@eval` blocks @cancelled(22-01-10 01:00)
  Not needed anymore since we don't use eval as much
  ☐ Document flavors

Tests:
  ✘ Uncomment complex tests in `construction.jl` @cancelled(22-01-10 01:00)
  Dropped support for Complex for now
  ✔ Use `===` or `≛` instead of `==` @done(21-12-29 23:26)
  ☐ Test all flavors